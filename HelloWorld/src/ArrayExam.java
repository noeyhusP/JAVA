public class ArrayExam {
    public static void main(String[] args) {
        // 자바에서 배열 만들기
        int[] ar = {11, 22, 33, 44, 55};

        System.out.println(ar);
        // 참조변수를 찍음 (자바스크립트와 다름)

        // 자바스크립트에서의 new(); 가 생략된 거라 생각하면 됨 (배열을 쓰기 위한 슈거코드)
        // 자바스크립트에서는 이렇게 정석이 아닌 방식을 리터럴방식이라고 표현하지만
        // 자바에서는 슈거코드임 (비정상적인 것이지만 허용은 해준 것)

        // fm 코딩은 아래 코드와 같음 / 아래코드는 결국 위 코드와 동일한 코드임
        // 값을 11,22.. 로 초기화 한 int 배열 arr을 heap에다 할당하라는 명령어 
        int[] ar2 = new int[] {11, 22, 33, 44, 55};

        for (int i = 0; i < ar2.length; i++)
        {
            System.out.println(ar2[i]);
        }

        // 초기화 없이 int 5개짜리 배열 만들기
        int[] ar3 = new int[5];

        // 대입해서 직접 초기화 해주기
        ar3[0] = 10;
        ar3[1] = 20;
        ar3[2] = 30;
        ar3[3] = 40;
        ar3[4] = 50;

        // 단, int[] ar3 = new int[5] {11, 22, 33, 44, 55}; 이런 방식은 에러임
        // 자바는 기본적으로 개발자를 믿지 않는 언어이기 때문에 실수의 가능성을 미연에 방지하기 위해
        // 개발자가 모든 세팅을 하는 것을 허용하지 않음 (자체적 Robustness 강조)
        // 반면 C++은 개발자 모든 세팅을 해야 그에 맞에 결과를 출력해줌 (매우 수동적)

        for (int i = 0; i < ar3.length; i++)
        {
            System.out.println(ar3[i]);
        }

        // 자바는 에러가 발생하면 그 프로세스 자체를 아예 실행하지 않아버림
        // 그러므로 자바는 칼같이 깔끔하게 짜거나 (코드의 완성도가 높도록),
        // 에러에 대한 대비(경우의 수)도 개발자가 알아서 꼼꼼하게 해둬야 하는 언어 
        // 프로그램의 복잡도가 늘어남에 따라 C, C++, JS 처럼 유연한 언어보다는
        // 자바처럼 촘촘하게 따지는 언어가 더 많아짐 ex) C#


    }
}
